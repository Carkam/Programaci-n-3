/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lab2a;

import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

  /**
     * Carlos Antonio Laib Contreras (0901-17-518)
     * 21/02/2019
     * Planilla que  calcula el sueldo liquido de los trabajadores mostrando los
     * totales por departamento
     * Grupo#1 Presentacion
     */
public class lab2 extends javax.swing.JFrame {
    String sFechaInicial,sFechaFinal,sCodigoNominaEncabezado;
    int iCodigoEmpleadoNomina, iCodigoConceptoNomina, iCodigoDepartamentos;          
     DecimalFormat dfFormato=new DecimalFormat("0.00");
    /**
     * Creates new form lab2
     */
    public lab2() {
        initComponents();
        funNominaEncabezado();
        funCodigosDepartamento();
    }
public void funNominaEncabezado(){
      try{
            Connection cn = DriverManager.getConnection("jdbc:mysql://localhost/nomina", "root", "");
            PreparedStatement pst = cn.prepareStatement("SELECT * FROM nominaencabezado");                 
            ResultSet rs = pst.executeQuery(); 
            boolean bSiguiente=rs.next();
            while(bSiguiente){ 
                this.cmbFechaNominaEncabezado.addItem(rs.getString("fecha_inicial_nomina")+" al "+rs.getString("fecha_final_nomina"));
               bSiguiente=rs.next();
            }            
            cn.close();
        }catch (Exception e){
            System.out.println("gg"+ e);
        }
}
public void funTokensFecha(){
     StringTokenizer stToken=new StringTokenizer((String) cmbFechaNominaEncabezado.getSelectedItem()," al ");        
        while(stToken.hasMoreTokens()){
        sFechaInicial=stToken.nextToken();
        sFechaFinal=stToken.nextToken();
        }
        System.out.println(sFechaInicial);
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblMatriz = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTotal = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblTotal1 = new javax.swing.JTable();
        cmbFechaNominaEncabezado = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        btnMostrarNomina = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tblMatriz.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Nombre Empleado", "Sueldo Base", "Bonificaci√≥n", "Comisiones", "IGSS", "Descuentos Judiciales", "ISR", "Sueldo Liquido", "Departamento"
            }
        ));
        jScrollPane1.setViewportView(tblMatriz);

        tblTotal.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tblTotal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Departamento", "Total"
            }
        ));
        tblTotal.setRowHeight(40);
        jScrollPane2.setViewportView(tblTotal);

        tblTotal1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        tblTotal1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1-5000", "3%"},
                {"5001-10000", "5%"},
                {"10000-100000", "10%"}
            },
            new String [] {
                "Rango", "Porcentaje"
            }
        ));
        tblTotal1.setRowHeight(40);
        jScrollPane3.setViewportView(tblTotal1);

        cmbFechaNominaEncabezado.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFechaNominaEncabezadoItemStateChanged(evt);
            }
        });
        cmbFechaNominaEncabezado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbFechaNominaEncabezadoActionPerformed(evt);
            }
        });

        jLabel1.setText("Nomina de la fecha : ");

        btnMostrarNomina.setText("Mostrar");
        btnMostrarNomina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarNominaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel1)
                        .addGap(49, 49, 49)
                        .addComponent(cmbFechaNominaEncabezado, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(btnMostrarNomina, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 819, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))))
                .addGap(34, 34, 34)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbFechaNominaEncabezado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnMostrarNomina, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbFechaNominaEncabezadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbFechaNominaEncabezadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbFechaNominaEncabezadoActionPerformed

    private void cmbFechaNominaEncabezadoItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFechaNominaEncabezadoItemStateChanged
          if (evt.getStateChange()==ItemEvent.SELECTED) {
             funTokensFecha();
         try{
            Connection cn = DriverManager.getConnection("jdbc:mysql://localhost/nomina", "root", "");
            PreparedStatement pst = cn.prepareStatement("SELECT nomicodigo FROM nominaencabezado WHERE fecha_inicial_nomina=?");    
            pst.setString(1, sFechaInicial);
            ResultSet rs = pst.executeQuery(); 
            if(rs.next()){
               sCodigoNominaEncabezado=rs.getString("nomicodigo");  
               System.out.println(sCodigoNominaEncabezado);
            }                      
            cn.close();
        }catch (Exception e){
            System.out.println("gg"+ e);
        }  
        } 
    }//GEN-LAST:event_cmbFechaNominaEncabezadoItemStateChanged
public void funcodigosEmpleados(){
       try{
            Connection cn = DriverManager.getConnection("jdbc:mysql://localhost/nomina", "root", "");
            PreparedStatement pst = cn.prepareStatement("SELECT empcodigo FROM nominadetalles WHERE nomicodigo="+sCodigoNominaEncabezado+" ORDER BY nomicodigo DESC"); 
            ResultSet rs = pst.executeQuery();         
            if(rs.next()){ 
                iCodigoEmpleadoNomina=Integer.parseInt(rs.getString("empcodigo"));          
               System.out.println(iCodigoEmpleadoNomina+"detalle");                        
            }           
            cn.close();
        }catch (Exception e){
            System.out.println("gg"+ e);
        }
}
public void funCodigosConceptos(){
       try{
            Connection cn = DriverManager.getConnection("jdbc:mysql://localhost/nomina", "root", "");
            PreparedStatement pst = cn.prepareStatement("SELECT * FROM concepto  ORDER BY concodigo DESC");            
            ResultSet rs = pst.executeQuery();         
            if(rs.next()){                      
                iCodigoConceptoNomina=Integer.parseInt(rs.getString(1)); 
                System.out.println(iCodigoConceptoNomina);
            }            
            cn.close();
        }catch (Exception e){
            System.out.println("Errrror"+ e);
        } 
}
public void funNombreEmpleadosDepartamento(int iComienzo){
     
    try{
                        Connection cn = DriverManager.getConnection("jdbc:mysql://localhost/nomina", "root", "");
                        PreparedStatement pst = cn.prepareStatement("SELECT empleados.empnombre, departamentos.depnombre FROM empleados, departamentos, nominaencabezado,nominadetalles WHERE empleados.depcodigo=departamentos.depcodigo AND nominadetalles.empcodigo=empleados.empcodigo AND nominaencabezado.nomicodigo=nominadetalles.nomicodigo AND empleados.empcodigo="+iComienzo+"");    
                                           
                         ResultSet rs = pst.executeQuery(); 
                         if (rs.next()) {
                             System.out.println(rs.getString("empleados.empnombre"));
                             tblMatriz.setValueAt(rs.getString("empleados.empnombre"), (iComienzo-1), 0);
                             tblMatriz.setValueAt(rs.getString("departamentos.depnombre"), (iComienzo-1), 8);                                                 
                         }
     
                         cn.close();
                    }catch (Exception e){
                        System.out.println("Errror"+ e);
                     } 
}
public void funMontoConcepto(int iComienzo,int iComienzoDetalle, double dAgregarATabla[],String sEfecto[]){
     
    try{
                        Connection cn = DriverManager.getConnection("jdbc:mysql://localhost/nomina", "root", "");
                        PreparedStatement pst = cn.prepareStatement("SELECT nominadetalles.nomidtotal, concepto.conefecto FROM nominadetalles,concepto WHERE nominadetalles.concodigo=concepto.concodigo AND nominadetalles.empcodigo="+iComienzo+" and concepto.concodigo="+iComienzoDetalle+" and nominadetalles.nomicodigo="+sCodigoNominaEncabezado+"");    
                         
                         ResultSet rs = pst.executeQuery(); 
                         if (rs.next()) {                            
                             dAgregarATabla[iComienzoDetalle]=Double.parseDouble(rs.getString("nominadetalles.nomidtotal")); 
                             sEfecto[iComienzoDetalle]=rs.getString("concepto.conefecto");                                                        
                         }else{
                             System.out.println(dAgregarATabla[iComienzoDetalle]);
                             dAgregarATabla[iComienzoDetalle]=0;
                             sEfecto[iComienzoDetalle]=null;                                                        
                         }                      
                            tblMatriz.setValueAt(dAgregarATabla[1], (iComienzo-1), 2);
                            tblMatriz.setValueAt(dAgregarATabla[2], (iComienzo-1), 4);
                            tblMatriz.setValueAt(dAgregarATabla[3], (iComienzo-1), 1);
                            tblMatriz.setValueAt(dAgregarATabla[4], (iComienzo-1), 6);
                            tblMatriz.setValueAt(dAgregarATabla[5], (iComienzo-1), 3);
                            tblMatriz.setValueAt(dAgregarATabla[6], (iComienzo-1), 5);
                         cn.close();
                    }catch (Exception e){
                        System.out.println("Error"+ e);
                     }                     
                           
}
    private void btnMostrarNominaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarNominaActionPerformed
        funLimpiarTablas();
        funcodigosEmpleados();  
        funCodigosConceptos();
          
        int iComienzo=1;       
         double[] dAgregarATabla;
         String[] sEfecto;
         //
          DefaultTableModel modelo=new DefaultTableModel();
          modelo.setColumnIdentifiers(new Object[]{"Nombre Empleado","Sueldo Base","Bonificaci√≥n","Comisiones","IGSS","Descuentos Judiciales","ISR","Sueldo Liquido","Departamento"});   
    if (iCodigoEmpleadoNomina!=0) {
       do {
             modelo.addRow(new Object[]{"","","","","","","","",""});
             tblMatriz.setModel(modelo);
             int iComienzoDetalle=1;
             funNombreEmpleadosDepartamento(iComienzo);             
             dAgregarATabla=new double[7]; 
             sEfecto=new String[7];      
             do {                 
                 funMontoConcepto(iComienzo,iComienzoDetalle,dAgregarATabla,sEfecto);
                 iComienzoDetalle++; 
             } while (iComienzoDetalle<=iCodigoConceptoNomina);
              funCalculoSueldoLiquido(sEfecto,dAgregarATabla,iComienzo);                
            iComienzo++;
        } while (iComienzo<=iCodigoEmpleadoNomina);        
      
        
         funTotalporDepartamento();
         funVerificarVacioTablaNomina();     
    }
        
         
       
    }//GEN-LAST:event_btnMostrarNominaActionPerformed
public void funVerificarVacioTablaNomina(){
      int iFila=tblMatriz.getRowCount();
         int iInicio=0;
         do {   
             iFila=tblMatriz.getRowCount();
                if (iInicio!=iFila) {                    
                    String sVerificarLleno= (String) tblMatriz.getValueAt((iInicio), 0);                   
                     if (sVerificarLleno==null) {                 
                    DefaultTableModel modelo = (DefaultTableModel)tblMatriz.getModel();
                    modelo.removeRow(iInicio);   
                    iInicio=iInicio;
                }else{
                   iInicio++; 
                } 
             }else{
                    break;
                }
        } while (iInicio<iFila);
}

    public void funCalculoSueldoLiquido(String[] sEfecto, double[] dMonto,int iComienzo){
    double dSueldoLiquido=0;
    for (int i = 1; i < 7; i++) {      
        if (sEfecto[i]!=null) {
               if ("+".equals(sEfecto[i])) {                                   
                   dSueldoLiquido=dSueldoLiquido+dMonto[i];                    
               }else if ("-".equals(sEfecto[i])) {                                   
                    dSueldoLiquido=dSueldoLiquido-dMonto[i];                  
               }
        }else{             
             dSueldoLiquido=dSueldoLiquido+0;            
       } 
           tblMatriz.setValueAt(dSueldoLiquido, (iComienzo-1), 7);   
    }
   
}
   public void funTotalporDepartamento(){
       int iComienza=1;
       DefaultTableModel modelo=new DefaultTableModel();
        modelo.setColumnIdentifiers(new Object[]{"Departamento","Total"});
       if (iCodigoEmpleadoNomina!=0) {
         do {
            modelo.addRow(new Object[]{"",""});
           tblTotal.setModel(modelo);
           funNombreDepartamento(iComienza);
           funCalculoporDepartamento(iComienza);
           
           iComienza++;
       } while (iComienza<=iCodigoDepartamentos);
       }
      
       
   }
   public void funCodigosDepartamento(){
       try{
            Connection cn = DriverManager.getConnection("jdbc:mysql://localhost/nomina", "root", "");
            PreparedStatement pst = cn.prepareStatement("SELECT * FROM departamentos ORDER BY depcodigo DESC");                 
            ResultSet rs = pst.executeQuery();         
            if(rs.next()){ 
                iCodigoDepartamentos=Integer.parseInt(rs.getString(1));                                               
            }            
            cn.close();
        }catch (Exception e){
            System.out.println("gg"+ e);
        }
}
   public void funCalculoporDepartamento(int iComienza){
      
      double dTotalporDepartamento=0,dMonto;
      String sEfecto;
       try{
            Connection cn = DriverManager.getConnection("jdbc:mysql://localhost/nomina", "root", "");
            PreparedStatement pst = cn.prepareStatement("SELECT nominadetalles.nomidtotal, concepto.conefecto, empleados.empnombre, departamentos.depnombre FROM nominadetalles,concepto,empleados,nominaencabezado,departamentos WHERE empleados.depcodigo=departamentos.depcodigo and nominadetalles.empcodigo=empleados.empcodigo and nominaencabezado.nomicodigo=nominadetalles.nomicodigo and nominadetalles.concodigo=concepto.concodigo and nominaencabezado.nomicodigo=? AND departamentos.depcodigo=?");    
            pst.setString(1, sCodigoNominaEncabezado);
            pst.setString(2, Integer.toString(iComienza));
            ResultSet rs = pst.executeQuery();
            boolean bTerminar=rs.next();
            if (rs.first()) {
               rs.beforeFirst();
               while(rs.next()){
                    dMonto=Double.parseDouble(rs.getString("nominadetalles.nomidtotal")); 
                  sEfecto=rs.getString("concepto.conefecto"); 
                    if ("+".equals(sEfecto)) {                                   
                         dTotalporDepartamento=dTotalporDepartamento+dMonto;                         
                    }else if ("-".equals(sEfecto)) {                                   
                         dTotalporDepartamento=dTotalporDepartamento-dMonto; 
                        
                     }
               }
           }else{             
                
               dTotalporDepartamento=dTotalporDepartamento+0;
              
            }           
              //
                 
           
            tblTotal.setValueAt(dTotalporDepartamento, (iComienza-1), 1);
            cn.close();
        }catch (Exception e){
           System.out.println("gg"+ e);
        }  
   }
   public void funNombreDepartamento(int iComienza){
     
    try{
                        Connection cn = DriverManager.getConnection("jdbc:mysql://localhost/nomina", "root", "");
                        PreparedStatement pst = cn.prepareStatement("SELECT depnombre FROM departamentos WHERE depcodigo=? ");    
                         pst.setString(1, Integer.toString(iComienza));                   
                         ResultSet rs = pst.executeQuery(); 
                         if (rs.next()) {  
                             tblTotal.setValueAt(rs.getString("depnombre"), (iComienza-1), 0);                                                                             
                         }
     
                         cn.close();
                    }catch (Exception e){
                        System.out.println("gg"+ e);
                     } 
}
   public void funLimpiarTablas(){
       DefaultTableModel dftModeloLimpiador1 = (DefaultTableModel) tblMatriz.getModel(); 
        //contamos el numero de filas que tiene la matriz
              int iLimpiador =tblMatriz.getRowCount();
            for(int i=0; i<iLimpiador; i++) {            
                //vamos removiendo cada fila del model y por lo tanto tambien de la tabla
                dftModeloLimpiador1.removeRow(0);
            }
          //limpiamos la segunda tabla
        DefaultTableModel dftModeloLimpiador2 = (DefaultTableModel) tblTotal.getModel(); 
        //contamos el numero de filas que tiene el vector
              int iLimpiador2 =tblTotal.getRowCount();
            for(int i=0; i<iLimpiador2; i++) {            
                //vamos removiendo cada fila del model y por lo tanto tambien de la tabla tblTotal
                dftModeloLimpiador2.removeRow(0);
            }
   }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(lab2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(lab2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(lab2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(lab2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Usuario().setVisible(true);
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMostrarNomina;
    private javax.swing.JComboBox<String> cmbFechaNominaEncabezado;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblMatriz;
    private javax.swing.JTable tblTotal;
    private javax.swing.JTable tblTotal1;
    // End of variables declaration//GEN-END:variables
}
